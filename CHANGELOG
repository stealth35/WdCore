2011-04-12 # 0.10.0-dev

[NEW] Redesigned Operation API.

[NEW] Request.API class.




2011-03-10 # 0.9.0

* Modules accessor:

Just like models, modules are now got throught an accessor. The `index_modules`,
`read_module_info`, `load_module`, `get_module`, `has_module`, `run_modules` methods of the WdCore
class are now deprecated, one can check the availability of a module or get a module using the
following lines:

	$has_module = isset($core->modules['system.nodes']);
	$hasnt_module = empty($core->modules['system.nodes']);
	
	$module = $core->modules['system.nodes'];
	
As stated before, the `load_module` is now deprecated, it was moved to the modules accessor class
and is now protected. The sole purpose of it being public was to circumvent the autorun feature of
the `get_module` method. The same behaviour can now be easily achieved using the `autoload`
property of the accessor:

	$core->modules->autoload = false;
	$module = $core->modules['system.nodes'];
	
As for the `index_modules`, `read_module_info` and `run_modules` methods, they have been move to
the accessor class. The `index_modules` and `read_module_info` are now protected, but the former
`run_modules` has been made public since its now outside the scope of the WdCore class. One can run
modules with the following line:

	$core->modules->run();
	
The `descriptors` property of the Core object is now deprecated, and is available in the modules
accessor:

	$core->modules->descriptors;
	
On a side note, one should pay attention to the relationship between mixin getters and the modules
accessor, because if mixins getters are initialized before the modules accessor, the modules
configuration for the getters will never be considered.


* Variables accessor:

Values can now be stored as simple files in the "/repository/var" directory. This accessor
is a meant to simplify the process:

	$core->vars['my_variable_name'] = $value;
	$value = $core->vars['my_variable_name'];
	
	$has_value = isset($core->vars['my_variable_name']);
	$hasnt_value = empty($core->vars['my_variable_name']);
	
	unset($core->vars['my_variable_name']);
	
This is now the prefered way to store low-level system configuration, instead of using the
registry.


* Connections accessor:

Database connections are now got throught the `connections` accessor. The accessor is traversable
and iterates throught the established connections:

	$primary = $core->connections['primary'];
	$local = $core->connections['local'];
	
	foreach ($core->connections as $id => $connection)
	{
		echo "{$connection->queries_count} queries were made using the $id connection<br />";
	}

The WdCore::db() method is now deprecated, but the `db` getter can still be used to get the primary
connection.


* WdActiveRecordQuery, WdDatabaseTable & WdModel:

The WdActiveRecordQuery class is now used throughout the framework to compose SQL queries. This
obviously had a major impact on queries design (which in so much easier now), but it also had
a huge impact in the way records are retrieved from models.

The `select()` and `count()` methods have been removed from the WdDatabaseTable and are now
available from the WdModel class, which defers them to a WdActiveRecordQuery object. The
WdModel::loadRange() method is gone and the WdModel::load() and WdModel::loadAll() methods have
been replaced with the WdModel::find() method.

The new WdModel::find() method can find single records as well a set of records, ordered as
they were requested. An exception is now thrown, as a WdMissingRecordException object, when a
record could not be found in the model, which allows for better software design and error handling.
More over, the records found are cached and the same record won't be loaded twice, whether it is
single or in a set.

The WdModel class implements the ArrayAccess interface and allows for nicer code:

	$record = $model[1];

To match the new model/record vocabulary an effort is undergoing to replace any "entry" reference
with "record".

For queries, the "{self_and_related}" SQL statement placeholder can now be used to query a table
and all of its related tables.

Filters are automatically generated for the fields defined by the model :

	$model->find_by_slug('my-slug');
	
Models can define scopes, which are macros for serch methods :

	$model->visible;
	# shortcut for
	$model->where('is_online AND (siteid = 0 OR siteid = ?) AND (language = "" OR language = ?', $site->siteid, $site->language); 

The `average`, `minimum`, `maximum` and `sum` compute methods can be used to compute the value of
a column.


* Operations controls:

The pattern used for control callbacks has been changed for one that is more readable and hopefully
more stable: "control_<control>_for_operation[_<name>]", where "<control>" is the name of the
control to pass and "<name>" is the name of the operation. The "_<name>" part being optional, one
can define a callback for a specific operation, or let the framework use the generic one.

The pattern was changed due to collisions occuring when, for the "form" operation, a same callback
was used to control the operation ("control_operation_<name>") and the generic form control
("control_operation_form"). 

A properties control has been added. The generic callback for this control is currently filtering
out operation's parameters and handeling booleans, to transform them into model's values, which can
be used as is to save a record, for example.

The CONTROL_ENTRY control has been renamed as CONTROL_RECORD to better match the vocabulary used
throughout the framework. The callback now alters the operation object with the `record` property
rather then the former `entry` one.

The control chain is now as follows:

1. CONTROL_AUTHENTICATION: control_authentication_for_operation[_<name>]
2. CONTROL_PERMISSION: control_permission_for_operation[_<name>]
3. CONTROL_RECORD: control_record_for_operation[_<name>]
4. CONTROL_OWNERSHIP: control_ownership_for_operation[_<name>]
5. CONTROL_FORM: control_form_for_operation[_<name>]
6. CONTROL_PROPERTIES: control_properties_for_operation[_<name>]
7. CONTROL_VALIDATOR: validate_operation[_<name>]

The generic callback for the CONTROL_RECORD control does no longer succeed if the operation's key is
empty. Thus, a dedicated control callback has been added for the "save" operation, which succeed
even if the operation's key is empty, which is the case for new records.

All callbacks for the "save" operation must now use the CONTROL_PROPERTIES control and the
operation object's `properties` array created by the associated callbacks.


* WdRoute:

Route resolving for the magic routes 'manage', 'create', 'config' and 'edit' has finally been
removed from the class. The "routes" constructor now filters out routes which pattern doesn't start
with a slash '/', leaving further parsing and resolving to others.

The WdRoute::add() method can be used to add or replace a route or a set of route, and the remove()
method can be used to remove a route which is defined using the configuration system or the
WdRoute::set() method.

Route pattern segments can now be defined as ':identifier' e.g. ':slug' instead of '<slug:[^/]+>'.


* WdI18n:

An additionnal scope can be specified, adding further context to translations:

	WdI18n:push_scope(array('user_users', 'edit');
	
	$label = t('username', array(), array('scope' => array('element', 'label'))); 

	WdI18n:pop_scope();
	
The WdTranslator class creates translators, which can be used to easily translate string using a
same set of options:

	$translator = new WdTranslator(array('language' => 'fr', 'scope' => 'manager'));
	$translator('title');
	// or $translator->t('title') for PHP < 5.3


* Other changes:

[NEW] Events are now defined in the "events" namespace of the "hooks" config.

[NEW] The "<flat_module_id>_WdHook" class is added to the autoload classes if the file "hooks.php"
is found in the root of a module directory.

[NEW] In order to standardize the event handling, the 'target' property is now used to associate an
event with an object.

[NEW] The 'Referer' HTTP header is set when the operation result location is changed.

[NEW] Instances of WdObject can now define what we call "volatile getters", getters that return
values but don't set properties.

[NEW] Hypens in operations name are converted to underscores for RESTful operations.

[NEW] WdFileCache: the T_MODIFIED_TIME tag specifies the time at which assets where modified. This
time is used to keep the cache up to date.

[NEW] Added the `db` getter for the "primary" database connection.

[NEW] The WdCore::run_context() method can now be override to provide a context for the
application e.g. language, timezone, site.

[NEW] The WdObject::has_method() method can now be used to know if an objet as a method, either
a class method or a mixin.

[NEW] RESTful operations are now constructed from the 'routes' config.

[NEW] the wd_hypenate() function.

[CHG] When defined as an array, the `scope` option is now cascading, a translation is searched in
the different scopes : array('users', 'delete', 'operation') can be used to search for a
translation in the 'users.delete.operation', 'delete.operaton' and 'operation' namespaces.

[CHG] Renamed the WdLocale class as WdI18n.

[CHG] The '/api/core/aloha' and 'api/core/ping' operations are now defined like any other operation.

[CHG] Moved to 'cache catalogs' config options from 'i18n' to 'core'.

[CHG] The permission constants are now constants of the WdModule class.

[CHG] Renamed WdModule::T_ROOT as WdModule::T_PATH.

[CHG] Changed the name scheme of the constructed config cache files.

[CHG] Better support for sub operations.

[CHG] Renamed WdModule::isInstalled() as WdModule::is_installed() and
WdDatabaseTable::IsInstalled() as WdDatabaseTable::is_installed().

[CHG] Data is now provided to the WdOperation::decode() method.

[CHG] Renamed the wd_camelCase() function as wd_camelize();

[DEL] WdObject: The `__get_them_all` method is deprecated, override the `__defer_get` method
instead.




2010-11-08 # 0.8.0

[NEW] Hooks can now be used to add methods (and getters) to instances of the FObject class.

[NEW] The wd_array_insert() function can be used to insert values after or before a specified key.

[NEW] The ".json" or ".xml" extensions can be appened to RESTful operations URL for a response in
"application/json" or "application/xml" format.

[NEW] WdModule: The 'control_operation' callback now throws WdHTTPException exceptions when control
fail on CONTROL_AUTHENTICATION, CONTROL_PERMISSION, CONTROL_ENTRY and CONTROL_OWNERSHIP.

[NEW] Because isset() or get_object_vars() don't work with virtual properties, the `has_property`
of the FObject class can be used to know if an object has a property even if the property is NULL.

[NEW] The configuration system has been rewrote :

The configuration process is now handled through the WdConfig class instead of the WdCore class.

The 'autoconfig' feature is now deprecated. Classes can use the `__static_construct()` method to
read configuration on loading.

In order to be able to use the `__static_construct()` method, which is only called by the WdCore's
autoloader, the WdLocale, WdDebug and WdException classes are no longer loaded by the WdCore
include file, thus, they can only be available *after* the `__construct()` method returns.

[NEW] Module models can now use models from other modules, finally introducing a form of model
inheritance, or at least reusing. Instead of defining the tags to create the model to use, one can
provide the name of another module's model e.g. 'contents/primary', or use the keywork 'inherit'
that will try to find a model matching the module's parent class.

[NEW] Extended tables are now updated in a single operation.

[NEW] WdEvent: events are now configured in the 'events' namespace instead of the 'event'
namespace. Event definitition have changed from a simple callback to a definition made of the
callback as index 0 and options. Currently, the 'instanceof' option can be used to filter targets
for which the callback is actually called when the event is triggered.

[CHG] The CONTROL_AUTHENTICATED control as been renamed as CONTROL_AUTHENTICATION.

[CHG] The operation control and validation process has been refined :

The 'controlOperation' has been renamed as 'handle_operation_control'. The 'controlForm' method has
been removed. The getOperationAccessControl() method has been broken into callbacks. The control
callbacks have been renamed from 'control_<type>' to 'control_operation_<type>'. The operation
specific callbacks are now defined as 'control_operation_<operation_name>_<type>'.

As an example, the following methods are called when the 'save' operation is processed :

	handle_operation
	handle_operation_control
	
	get_operation_save_controls || get_operation_controls
	
	control_operation_save || control_operation
	control_operation_save_authentication || control_operation_authentication
	control_operation_save_form || control_operation_form
	
	validate_operation_save || validate_operation
	
[CHG] The CONTROL_AUTHENTICATION and CONTROL_ENTRY are added when the CONTROL_OWNERSHIP is defined.
The controls are added only if they are not already defined. 

[CHG] The URL base used to issue RESTful operation is now "/api/" instead of "/do/".

[REM] The user object will no longer be added as a member of the operation object during operation
controls. 

[REM] The application object is gone, everything goes through the core object now.

[FIX] WdDebug messages are not restored.




2010-07-08 # 0.7.16

[NEW] WdModel: The active record class is now inherited from the parent model.

[NEW] WdModule: Added getters support.

[NEW] WdModule: Added 'model' getter.

[NEW] WdHook: Callback can now be objects defined as 'o:<object_class>'.

[NEW] The path to the config origin is now used as a key for each configs.

[NEW] The autoloader now executes the `__static_construct()` method where available. This feature
should be used to replace the former autoconfig process.

[NEW] WdActiveRecord: One can implement the `__get_them_all` method to create a general fallback
for the `__get` method.

[NEW] Added RESTful support for operations.

[NEW] Operations can now be defined using routes.

[NEW] Added the WdApplicationSession class for lazy session creation using the `session` virtual
property of the application object. The session is now started on demand.

[NEW] Models can now be directly loaded using the core object. 

[CHG] WdHook: Hook's callback is not longer called with a clone of the hook as first parameter.
The arguments passed to the call() method are passed as is to the hook's callback.

[CHG] The WdOperation::dispatch() method now returns the result of the operation.

[CHG] The classes autoconfig() method now receive an array of configs instead of a variable number
of arguments.




2010-04-25 # 0.7.14

[NEW] The WdHook class has been completely rewrote.

[NEW] WdImage: Unless the user provided a callback, the background of resized images is now filled
with a transparent color, preserving the transparency of resized images.

[NEW] The WdCore::getConstructedConfig() static method can be used to get a constructed config. If
the constructed config doesn't exists yet, the provided constructor is called with all the pending
configs. The resulting constructed config is then returned. The constructed config is stored if
'cache configs' is set to true in the `core` config.

For most classes, this system might be a better solution then the `autoconfig` one.  

[NEW] WdFileCache: When available, APC is used to cache data.

[CHG] WdFileCache: The order of the arguments for the constructor of the load() method have changed
form 'cache, file, userdata' to 'userdata, cache, file'. 

[FIX] WdException: The HTTP code is no longer set in the header during the __construct but when the
the exception is stringified.




2010-03-25 # 0.7.13

[NEW] WdDatabaseTable: Smart aliases are now used during SQL queries. Instead of the puzzling `t1`
or `t2`, the aliases are now created using the table's name. e.g. the alias for the `system_nodes`
table would be `node` and the alias for a `categories` table would be `category`.

[NEW] WdOperation: The `method` property can now be used to known which method was used for the 
operation (GET / POST). The `terminus` property is set to TRUE for GET method operations.