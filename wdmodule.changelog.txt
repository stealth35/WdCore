2010-01-15 # 0.8.2

[CHG] The 'auto' value for WdModel::T_CLASS and WdModel::T_ACTIVERECORD_CLASS is no longer
supported. Instead, if the files '<model>.model.php' and '<model>.ar.php' exists in the module
directory, the classes '<module>_WdModel' and '<module>_WActiveRecord' are used.



2009-12-13 # 0.8.0

[DEL] Removed the getOperationResponse() and getOperationResult() method. The WdOperation class can
be used for this purpose.

[CHG] Renamed the validate_form_unit() method as control_form().

[CHG] Renamed the operationAccessControl() method as controlOperation().

[NEW] The controlOperation() method calls the control_operation_<operation> if defined, otherwise
it falls back on the control_operation() method.



2009-09-30 # 0.7.0

[CHG] The module has been update to use the new WdOperation object and what it changes
regarding operations handling.

[NEW] Added access control for operations.

Operation access control is a global mean to control the access of the operations on a module.
The method is controled againts user authentification, permission or ownership, form validation,
data validation and more.

By implementing the getOperationsAccessControls() method, you can return the controls to be used
for each of your operations. All control is done for you, which may remove a lot of work for
you.

[NEW] Added getOperationResult() method.

The getOperationResult() method is a complement to the getOperationResponse() method.
It can be used to directly get the result of an operation, insted of the whole response. The method
returns null if there is no response.



2009-08-26 # 0.6.12

[NEW] In order to protect operations, and most of all critical ones such as OPERATION_SAVE and
OPERATION_DELETE, the validateOperation() method now returns false when there is no validator
defined, preventing the execution of the operation.

The name pattern of the validator has changed to "validate_operation_<operation>"